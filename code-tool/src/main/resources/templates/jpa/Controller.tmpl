package ${pkgPrefix}.controller.${module};

import com.google.common.collect.Lists;
import ${pkgPrefix}.common.constants.sys.Pages;
import ${pkgPrefix}.common.domain.${module}.${className};
import ${pkgPrefix}.common.dto.page.DataPage;
import ${pkgPrefix}.common.util.ConvertUtil;
import ${pkgPrefix}.database.dao.base.condition.ConditionGroup;
import ${pkgPrefix}.service.${className}Service;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.Map;

/**
 * ${className} Controller
 *
 * @author : code generator
 * @version : 1.0
 * @since : ${date}
 */
@RestController
@RequestMapping("api")
public class ${className}Controller {

  @Autowired
  private ${className}Service ${classVar}Service;

  /**
   * 分页
   * @param params -
   * <p> pageNum        - Nullable   - Int - 当前页
   * <p> pageSize       - Nullable   - Int - 每页记录数
   * 
   * @return DataPage
   */
  @GetMapping(value = "/${classVar}/page", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
  public ResponseEntity page(@RequestParam Map<String, String> params) {
    ConditionGroup<${className}> conditionGroup = ConditionGroup.build();
    // 条件: e.g. conditionGroup.addCondition("${keyVar}", ConditionEnum.OPERATE_EQUAL,params.get("id"))
    return new ResponseEntity<>(DataPage.from(${classVar}Service.findAll(
      Pages.Helper.pageable(params, new Sort(Sort.Direction.ASC, "${keyVar}")))), HttpStatus.OK);
  }

  /**
   * 根据ID查询
   * @param id -
   * @return ${classVar}
   */
  @GetMapping(value = "/${classVar}/{id}", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
  public ResponseEntity findById(@PathVariable String id) {
    return new ResponseEntity<>(${classVar}Service.findById(id), HttpStatus.OK);
  }

  /**
   * 新增
   * @param params -
   * @return ${classVar}
   */
  @PostMapping(value = "/${classVar}", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
  public ResponseEntity save(@RequestBody Map<String, String> params) {
    ${className} ${classVar} = ConvertUtil.populate(new ${className}(), params);
    return new ResponseEntity<>(${classVar}Service.saveOrUpdate(${classVar}), HttpStatus.CREATED);
  }

  /**
   * 修改
   * @param params -
   * @return ${classVar}
   */
  @PutMapping(value = "/${classVar}", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
  public ResponseEntity update(@RequestBody Map<String, String> params) {
    ${className} ${classVar} = ConvertUtil.populate(${classVar}Service.findById(params.get("id")), params);
    return new ResponseEntity<>(${classVar}Service.saveOrUpdate(${classVar}), HttpStatus.ACCEPTED);
  }

  /**
   * 删除
   * @param ids -
   * @return -
   */
  @DeleteMapping(value = "/${classVar}/{ids}", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
  public ResponseEntity delete(@PathVariable String ids) {
    String[] idsList = StringUtils.split(ids, ",");
    ${classVar}Service.delete(Lists.newArrayList(idsList));
    return new ResponseEntity<>(HttpStatus.ACCEPTED);
  }
  
  /**
   * 删除
   * @param params -
   * @return -
   */
  @DeleteMapping(value = "/${classVar}", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
  public ResponseEntity delete(@RequestBody Map<String, String> params) {
    String[] idsList = StringUtils.split(params.get("ids"), ",");
    ${classVar}Service.delete(Lists.newArrayList(idsList));
    return new ResponseEntity<>(HttpStatus.ACCEPTED);
  }
}
