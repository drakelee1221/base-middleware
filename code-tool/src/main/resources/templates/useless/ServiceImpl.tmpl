package ${pkgPrefix}.service.${module};

import org.springframework.stereotype.Service;
import ${pkgPrefix}.database.dao.${module}.${className}Dao;
import ${pkgPrefix}.common.domain.${module}.${className};
import ${pkgPrefix}.database.dao.base.GenericJpaDao;
import ${pkgPrefix}.database.service.AbstractJpaService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Sort;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;
import com.base.components.database.dao.base.condition.ConditionGroup;
import com.mj.he800.common.constants.sys.Pages;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

/**
 * ${className} Service
 * @author : code generator
 * @version : 1.0
 * @since : ${date}
 */
@Service
public class ${className}Service extends AbstractJpaService<${className}, ${keyType}> {
  @Autowired
  private ${className}Dao ${classVar}Dao;


    /**
      * ${className}分页查询
      *
      * @param params
      *
      * @return Page<${className}>
      */
     public Page<${className}> page(Map<String, String> params) {
       ConditionGroup<${className}> conditionGroup = ConditionGroup.build();
         // 条件: e.g. conditionGroup.addCondition("id", ConditionEnum.OPERATE_EQUAL,params.get("id"))
       return ${classVar}Dao.findAll(conditionGroup, Pages.Helper.pageable(params, new Sort(Sort.Direction.ASC, "id")));
     }
   
   
     /**
      * ${className}新增和修改
      *
      * @param ${classVar}
      *
      * @return
      */
     @Transactional(rollbackFor = Exception.class)
     public ${className} saveOrUpdate(${className} ${classVar}) {
       return ${classVar}Dao.save(${classVar});
     }
   
     /**
      * ${className}删除
      *
      * @param ids
      *
      * @return
      */
     @Transactional(rollbackFor = Exception.class)
     public void delete(String[] ids) {
       Assert.notEmpty(ids, "待删除的id集合不能为空");
       List<${className}> list = ${classVar}Dao.findAllById(Arrays.asList(ids));
       ${classVar}Dao.deleteInBatch(list);
     }



	@Override
  protected GenericJpaDao<${className}, ${keyType}> getDaoInstance() {
    return ${classVar}Dao;
  }
}